{"ast":null,"code":"function doOperation(state) {\n  const operator = state.operatorValue;\n  const preOperand = parseFloat(state.displayValue || \"0\");\n  const backOperand = parseFloat(state.nextValue || (operator === \"/\" || operator === '*' ? \"1\" : \"0\"));\n\n  if (operator === \"+\") {\n    return (preOperand + backOperand).toString();\n  }\n\n  if (operator === \"-\") {\n    return (preOperand - backOperand).toString();\n  }\n\n  if (operator === \"*\") {\n    return (preOperand * backOperand).toString();\n  }\n\n  if (operator === \"/\") {\n    if (backOperand == \"0\") {\n      return \"NaN\";\n    }\n\n    if (backOperand != \"0\") {\n      return (preOperand / backOperand).toString();\n    }\n  }\n\n  console.log('error');\n}\n\nexport default doOperation;","map":{"version":3,"sources":["/home/parkji/react_calculator/src/function/doOperation.js"],"names":["doOperation","state","operator","operatorValue","preOperand","parseFloat","displayValue","backOperand","nextValue","toString","console","log"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AACxB,QAAMC,QAAQ,GAAGD,KAAK,CAACE,aAAvB;AACA,QAAMC,UAAU,GAAGC,UAAU,CAACJ,KAAK,CAACK,YAAN,IAAsB,GAAvB,CAA7B;AACA,QAAMC,WAAW,GAAGF,UAAU,CAACJ,KAAK,CAACO,SAAN,KAAoBN,QAAQ,KAAK,GAAb,IAAoBA,QAAQ,KAAK,GAAjC,GAAuC,GAAvC,GAA4C,GAAhE,CAAD,CAA9B;;AACA,MAAIA,QAAQ,KAAK,GAAjB,EAAsB;AACpB,WAAO,CAACE,UAAU,GAACG,WAAZ,EAAyBE,QAAzB,EAAP;AACD;;AACD,MAAIP,QAAQ,KAAK,GAAjB,EAAsB;AACpB,WAAO,CAACE,UAAU,GAACG,WAAZ,EAAyBE,QAAzB,EAAP;AACD;;AACD,MAAIP,QAAQ,KAAK,GAAjB,EAAsB;AACpB,WAAO,CAACE,UAAU,GAACG,WAAZ,EAAyBE,QAAzB,EAAP;AACD;;AACD,MAAIP,QAAQ,KAAK,GAAjB,EAAsB;AACpB,QAAIK,WAAW,IAAI,GAAnB,EAAwB;AACtB,aAAO,KAAP;AACD;;AACD,QAAIA,WAAW,IAAI,GAAnB,EAAuB;AACrB,aAAO,CAACH,UAAU,GAACG,WAAZ,EAAyBE,QAAzB,EAAP;AACD;AACJ;;AACCC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AAED,eAAeX,WAAf","sourcesContent":["function doOperation(state) {\n    const operator = state.operatorValue\n    const preOperand = parseFloat(state.displayValue || \"0\")\n    const backOperand = parseFloat(state.nextValue || (operator === \"/\" || operator === '*' ? \"1\": \"0\"))\n    if (operator === \"+\") {\n      return (preOperand+backOperand).toString();\n    }\n    if (operator === \"-\") {\n      return (preOperand-backOperand).toString();\n    }\n    if (operator === \"*\") {\n      return (preOperand*backOperand).toString();\n    }\n    if (operator === \"/\") {\n      if (backOperand == \"0\") {\n        return \"NaN\"; \n      } \n      if (backOperand != \"0\"){\n        return (preOperand/backOperand).toString();\n      }\n  }   \n    console.log('error');\n  }\n\n  export default doOperation;"]},"metadata":{},"sourceType":"module"}