{"ast":null,"code":"function Operate(left, right, operation) {\n  const one = left || \"0\";\n  const two = right || (operation === \"/\" || operation === '*' ? \"1\" : \"0\"); //If dividing or multiplying, then 1 maintains current value in cases of null\n\n  if (operation === \"+\") {\n    return (one + two).toString();\n  }\n\n  if (operation === \"-\") {\n    return (one - two).toString();\n  }\n\n  if (operation === \"*\") {\n    return (one * two).toString();\n  }\n\n  if (operation === \"/\") {\n    if (two === \"0\") {\n      return \"NaN\";\n    } else {\n      return (one / two).toString();\n    }\n  }\n\n  throw Error(`Unknown operation '${operation}'`);\n}\n\nexport default Operate;","map":{"version":3,"sources":["/home/parkji/react_calculator/src/Operate.js"],"names":["Operate","left","right","operation","one","two","toString","Error"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,SAA9B,EAAyC;AACvC,QAAMC,GAAG,GAAGH,IAAI,IAAI,GAApB;AACA,QAAMI,GAAG,GAAGH,KAAK,KAAKC,SAAS,KAAK,GAAd,IAAqBA,SAAS,KAAK,GAAnC,GAAyC,GAAzC,GAA8C,GAAnD,CAAjB,CAFuC,CAEmC;;AAC1E,MAAIA,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAO,CAACC,GAAG,GAACC,GAAL,EAAUC,QAAV,EAAP;AACD;;AACD,MAAIH,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAO,CAACC,GAAG,GAACC,GAAL,EAAUC,QAAV,EAAP;AACD;;AACD,MAAIH,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAO,CAACC,GAAG,GAACC,GAAL,EAAUC,QAAV,EAAP;AACD;;AACD,MAAIH,SAAS,KAAK,GAAlB,EAAuB;AACrB,QAAIE,GAAG,KAAK,GAAZ,EAAiB;AACf,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,CAACD,GAAG,GAACC,GAAL,EAAUC,QAAV,EAAP;AACD;AACF;;AACD,QAAMC,KAAK,CAAE,sBAAqBJ,SAAU,GAAjC,CAAX;AACD;;AAED,eAAeH,OAAf","sourcesContent":["function Operate(left, right, operation) {\n  const one = left || \"0\"\n  const two = right || (operation === \"/\" || operation === '*' ? \"1\": \"0\"); //If dividing or multiplying, then 1 maintains current value in cases of null\n  if (operation === \"+\") {\n    return (one+two).toString();\n  }\n  if (operation === \"-\") {\n    return (one-two).toString();\n  }\n  if (operation === \"*\") {\n    return (one*two).toString();\n  }\n  if (operation === \"/\") {\n    if (two === \"0\") {\n      return \"NaN\";\n    } else {\n      return (one/two).toString();\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n\nexport default Operate;"]},"metadata":{},"sourceType":"module"}