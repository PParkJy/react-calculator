{"ast":null,"code":"import _objectWithoutProperties from \"/home/parkji/react_calculator/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/parkji/react_calculator/src/CalculatorLayout.js\";\n\n/*\nimport React, {Component } from 'react';\nimport Display from './Display';\nimport ButtonLayout from './ButtonLayout';\nimport Calculate from './Calculate'\n\nclass CalculatorLayout extends Component{\n    constructor(){ //props\n        super() //props\n        this.state = {input: \"\", op:\"\",  next:false}\n    }\n\n    buttonClick = (button_name) => {\n        this.setState(Calculate(this.state,button_name))\n)\n    }\n\n    render(){\n        return(\n            <div>\n                <Display value = {this.state.input}></Display>\n                <ButtonLayout click = {this.buttonClick}></ButtonLayout>\n            </div>\n        )\n    }\n}\n\nexport default CalculatorLayout;\n*/\nconst PointTarget = ReactPoint.PointTarget;\n\nclass AutoScalingText extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      scale: 1\n    };\n  }\n\n  componentDidUpdate() {\n    const scale = this.state.scale;\n    const node = this.node;\n    const parentNode = node.parentNode;\n    const availableWidth = parentNode.offsetWidth;\n    const actualWidth = node.offsetWidth;\n    const actualScale = availableWidth / actualWidth;\n    if (scale === actualScale) return;\n\n    if (actualScale < 1) {\n      this.setState({\n        scale: actualScale\n      });\n    } else if (scale < 1) {\n      this.setState({\n        scale: 1\n      });\n    }\n  }\n\n  render() {\n    const scale = this.state.scale;\n    return React.createElement(\"div\", {\n      className: \"auto-scaling-text\",\n      style: {\n        transform: `scale(${scale},${scale})`\n      },\n      ref: node => this.node = node,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nclass CalculatorDisplay extends React.Component {\n  render() {\n    const _this$props = this.props,\n          value = _this$props.value,\n          props = _objectWithoutProperties(_this$props, [\"value\"]);\n\n    const language = navigator.language || 'en-US';\n    let formattedValue = parseFloat(value).toLocaleString(language, {\n      useGrouping: true,\n      maximumFractionDigits: 6\n    }); // Add back missing .0 in e.g. 12.0\n\n    const match = value.match(/\\.\\d*?(0*)$/);\n    if (match) formattedValue += /[1-9]/.test(match[0]) ? match[1] : match[0];\n    return React.createElement(\"div\", Object.assign({}, props, {\n      className: \"calculator-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(AutoScalingText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, formattedValue));\n  }\n\n}\n\nclass CalculatorKey extends React.Component {\n  render() {\n    const _this$props2 = this.props,\n          onPress = _this$props2.onPress,\n          className = _this$props2.className,\n          props = _objectWithoutProperties(_this$props2, [\"onPress\", \"className\"]);\n\n    return React.createElement(PointTarget, {\n      onPoint: onPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"button\", Object.assign({\n      className: `calculator-key ${className}`\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst CalculatorOperations = {\n  '/': (prevValue, nextValue) => prevValue / nextValue,\n  '*': (prevValue, nextValue) => prevValue * nextValue,\n  '+': (prevValue, nextValue) => prevValue + nextValue,\n  '-': (prevValue, nextValue) => prevValue - nextValue,\n  '=': (prevValue, nextValue) => nextValue\n};\n\nclass Calculator extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: null,\n      displayValue: '0',\n      operator: null,\n      waitingForOperand: false\n    };\n\n    this.handleKeyDown = event => {\n      let key = event.key;\n      if (key === 'Enter') key = '=';\n\n      if (/\\d/.test(key)) {\n        event.preventDefault();\n        this.inputDigit(parseInt(key, 10));\n      } else if (key in CalculatorOperations) {\n        event.preventDefault();\n        this.performOperation(key);\n      } else if (key === '.') {\n        event.preventDefault();\n        this.inputDot();\n      } else if (key === '%') {\n        event.preventDefault();\n        this.inputPercent();\n      } else if (key === 'Backspace') {\n        event.preventDefault();\n        this.clearLastChar();\n      } else if (key === 'Clear') {\n        event.preventDefault();\n\n        if (this.state.displayValue !== '0') {\n          this.clearDisplay();\n        } else {\n          this.clearAll();\n        }\n      }\n    };\n  }\n\n  clearAll() {\n    this.setState({\n      value: null,\n      displayValue: '0',\n      operator: null,\n      waitingForOperand: false\n    });\n  }\n\n  clearDisplay() {\n    this.setState({\n      displayValue: '0'\n    });\n  }\n\n  clearLastChar() {\n    const displayValue = this.state.displayValue;\n    this.setState({\n      displayValue: displayValue.substring(0, displayValue.length - 1) || '0'\n    });\n  }\n\n  toggleSign() {\n    const displayValue = this.state.displayValue;\n    const newValue = parseFloat(displayValue) * -1;\n    this.setState({\n      displayValue: String(newValue)\n    });\n  }\n\n  inputPercent() {\n    const displayValue = this.state.displayValue;\n    const currentValue = parseFloat(displayValue);\n    if (currentValue === 0) return;\n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '');\n    const newValue = parseFloat(displayValue) / 100;\n    this.setState({\n      displayValue: String(newValue.toFixed(fixedDigits.length + 2))\n    });\n  }\n\n  inputDot() {\n    const displayValue = this.state.displayValue;\n\n    if (!/\\./.test(displayValue)) {\n      this.setState({\n        displayValue: displayValue + '.',\n        waitingForOperand: false\n      });\n    }\n  }\n\n  inputDigit(digit) {\n    const _this$state = this.state,\n          displayValue = _this$state.displayValue,\n          waitingForOperand = _this$state.waitingForOperand;\n\n    if (waitingForOperand) {\n      this.setState({\n        displayValue: String(digit),\n        waitingForOperand: false\n      });\n    } else {\n      this.setState({\n        displayValue: displayValue === '0' ? String(digit) : displayValue + digit\n      });\n    }\n  }\n\n  performOperation(nextOperator) {\n    const _this$state2 = this.state,\n          value = _this$state2.value,\n          displayValue = _this$state2.displayValue,\n          operator = _this$state2.operator;\n    const inputValue = parseFloat(displayValue);\n\n    if (value == null) {\n      this.setState({\n        value: inputValue\n      });\n    } else if (operator) {\n      const currentValue = value || 0;\n      const newValue = CalculatorOperations[operator](currentValue, inputValue);\n      this.setState({\n        value: newValue,\n        displayValue: String(newValue)\n      });\n    }\n\n    this.setState({\n      waitingForOperand: true,\n      operator: nextOperator\n    });\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  render() {\n    const displayValue = this.state.displayValue;\n    const clearDisplay = displayValue !== '0';\n    const clearText = clearDisplay ? 'C' : 'AC';\n    return React.createElement(\"div\", {\n      className: \"calculator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(CalculatorDisplay, {\n      value: displayValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"calculator-keypad\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-keys\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"function-keys\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(CalculatorKey, {\n      className: \"key-clear\",\n      onPress: () => clearDisplay ? this.clearDisplay() : this.clearAll(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, clearText), React.createElement(CalculatorKey, {\n      className: \"key-sign\",\n      onPress: () => this.toggleSign(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"\\xB1\"), React.createElement(CalculatorKey, {\n      className: \"key-percent\",\n      onPress: () => this.inputPercent(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"%\")), React.createElement(\"div\", {\n      className: \"digit-keys\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(CalculatorKey, {\n      className: \"key-0\",\n      onPress: () => this.inputDigit(0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"0\"), React.createElement(CalculatorKey, {\n      className: \"key-dot\",\n      onPress: () => this.inputDot(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"\\u25CF\"), React.createElement(CalculatorKey, {\n      className: \"key-1\",\n      onPress: () => this.inputDigit(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"1\"), React.createElement(CalculatorKey, {\n      className: \"key-2\",\n      onPress: () => this.inputDigit(2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"2\"), React.createElement(CalculatorKey, {\n      className: \"key-3\",\n      onPress: () => this.inputDigit(3),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"3\"), React.createElement(CalculatorKey, {\n      className: \"key-4\",\n      onPress: () => this.inputDigit(4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"4\"), React.createElement(CalculatorKey, {\n      className: \"key-5\",\n      onPress: () => this.inputDigit(5),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"5\"), React.createElement(CalculatorKey, {\n      className: \"key-6\",\n      onPress: () => this.inputDigit(6),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"6\"), React.createElement(CalculatorKey, {\n      className: \"key-7\",\n      onPress: () => this.inputDigit(7),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"7\"), React.createElement(CalculatorKey, {\n      className: \"key-8\",\n      onPress: () => this.inputDigit(8),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"8\"), React.createElement(CalculatorKey, {\n      className: \"key-9\",\n      onPress: () => this.inputDigit(9),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"9\"))), React.createElement(\"div\", {\n      className: \"operator-keys\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(CalculatorKey, {\n      className: \"key-divide\",\n      onPress: () => this.performOperation('/'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"\\xF7\"), React.createElement(CalculatorKey, {\n      className: \"key-multiply\",\n      onPress: () => this.performOperation('*'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"\\xD7\"), React.createElement(CalculatorKey, {\n      className: \"key-subtract\",\n      onPress: () => this.performOperation('-'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"\\u2212\"), React.createElement(CalculatorKey, {\n      className: \"key-add\",\n      onPress: () => this.performOperation('+'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"+\"), React.createElement(CalculatorKey, {\n      className: \"key-equals\",\n      onPress: () => this.performOperation('='),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"=\"))));\n  }\n\n}\n\nReactDOM.render(React.createElement(Calculator, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 304\n  },\n  __self: this\n}), document.getElementById('app'));\nexport default CalculatorLayout;","map":{"version":3,"sources":["/home/parkji/react_calculator/src/CalculatorLayout.js"],"names":["PointTarget","ReactPoint","AutoScalingText","React","Component","state","scale","componentDidUpdate","node","parentNode","availableWidth","offsetWidth","actualWidth","actualScale","setState","render","transform","props","children","CalculatorDisplay","value","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","CalculatorKey","onPress","className","CalculatorOperations","prevValue","nextValue","Calculator","displayValue","operator","waitingForOperand","handleKeyDown","event","key","preventDefault","inputDigit","parseInt","performOperation","inputDot","inputPercent","clearLastChar","clearDisplay","clearAll","substring","length","toggleSign","newValue","String","currentValue","fixedDigits","replace","toFixed","digit","nextOperator","inputValue","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","clearText","ReactDOM","getElementById","CalculatorLayout"],"mappings":"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","sourcesContent":["/*\nimport React, {Component } from 'react';\nimport Display from './Display';\nimport ButtonLayout from './ButtonLayout';\nimport Calculate from './Calculate'\n\nclass CalculatorLayout extends Component{\n    constructor(){ //props\n        super() //props\n        this.state = {input: \"\", op:\"\",  next:false}\n    }\n\n    buttonClick = (button_name) => {\n        this.setState(Calculate(this.state,button_name))\n)\n    }\n\n    render(){\n        return(\n            <div>\n                <Display value = {this.state.input}></Display>\n                <ButtonLayout click = {this.buttonClick}></ButtonLayout>\n            </div>\n        )\n    }\n}\n\nexport default CalculatorLayout;\n*/\n\nconst PointTarget = ReactPoint.PointTarget\n\nclass AutoScalingText extends React.Component {\n  state = {\n    scale: 1\n  };\n  \n  componentDidUpdate() {\n    const { scale } = this.state\n    \n    const node = this.node\n    const parentNode = node.parentNode\n    \n    const availableWidth = parentNode.offsetWidth\n    const actualWidth = node.offsetWidth\n    const actualScale = availableWidth / actualWidth\n    \n    if (scale === actualScale)\n      return\n    \n    if (actualScale < 1) {\n      this.setState({ scale: actualScale })\n    } else if (scale < 1) {\n      this.setState({ scale: 1 })\n    }\n  }\n  \n  render() {\n    const { scale } = this.state\n    \n    return (\n      <div\n        className=\"auto-scaling-text\"\n        style={{ transform: `scale(${scale},${scale})` }}\n        ref={node => this.node = node}\n      >{this.props.children}</div>\n    )\n  }\n}\n\nclass CalculatorDisplay extends React.Component {\n  render() {\n    const { value, ...props } = this.props\n    \n    const language = navigator.language || 'en-US'\n    let formattedValue = parseFloat(value).toLocaleString(language, {\n      useGrouping: true,\n      maximumFractionDigits: 6\n    })\n    \n    // Add back missing .0 in e.g. 12.0\n    const match = value.match(/\\.\\d*?(0*)$/)\n    \n    if (match)\n      formattedValue += (/[1-9]/).test(match[0]) ? match[1] : match[0]\n    \n    return (\n      <div {...props} className=\"calculator-display\">\n        <AutoScalingText>{formattedValue}</AutoScalingText>\n      </div>\n    )\n  }\n}\n\nclass CalculatorKey extends React.Component {\n  render() {\n    const { onPress, className, ...props } = this.props\n    \n    return (\n      <PointTarget onPoint={onPress}>\n        <button className={`calculator-key ${className}`} {...props}/>\n      </PointTarget>\n    )\n  }\n}\n\nconst CalculatorOperations = {\n  '/': (prevValue, nextValue) => prevValue / nextValue,\n  '*': (prevValue, nextValue) => prevValue * nextValue,\n  '+': (prevValue, nextValue) => prevValue + nextValue,\n  '-': (prevValue, nextValue) => prevValue - nextValue,\n  '=': (prevValue, nextValue) => nextValue\n}\n\nclass Calculator extends React.Component {\n  state = {\n    value: null,\n    displayValue: '0',\n    operator: null,\n    waitingForOperand: false\n  };\n  \n  clearAll() {\n    this.setState({\n      value: null,\n      displayValue: '0',\n      operator: null,\n      waitingForOperand: false\n    })\n  }\n\n  clearDisplay() {\n    this.setState({\n      displayValue: '0'\n    })\n  }\n  \n  clearLastChar() {\n    const { displayValue } = this.state\n    \n    this.setState({\n      displayValue: displayValue.substring(0, displayValue.length - 1) || '0'\n    })\n  }\n  \n  toggleSign() {\n    const { displayValue } = this.state\n    const newValue = parseFloat(displayValue) * -1\n    \n    this.setState({\n      displayValue: String(newValue)\n    })\n  }\n  \n  inputPercent() {\n    const { displayValue } = this.state\n    const currentValue = parseFloat(displayValue)\n    \n    if (currentValue === 0)\n      return\n    \n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '')\n    const newValue = parseFloat(displayValue) / 100\n    \n    this.setState({\n      displayValue: String(newValue.toFixed(fixedDigits.length + 2))\n    })\n  }\n  \n  inputDot() {\n    const { displayValue } = this.state\n    \n    if (!(/\\./).test(displayValue)) {\n      this.setState({\n        displayValue: displayValue + '.',\n        waitingForOperand: false\n      })\n    }\n  }\n  \n  inputDigit(digit) {\n    const { displayValue, waitingForOperand } = this.state\n    \n    if (waitingForOperand) {\n      this.setState({\n        displayValue: String(digit),\n        waitingForOperand: false\n      })\n    } else {\n      this.setState({\n        displayValue: displayValue === '0' ? String(digit) : displayValue + digit\n      })\n    }\n  }\n  \n  performOperation(nextOperator) {    \n    const { value, displayValue, operator } = this.state\n    const inputValue = parseFloat(displayValue)\n    \n    if (value == null) {\n      this.setState({\n        value: inputValue\n      })\n    } else if (operator) {\n      const currentValue = value || 0\n      const newValue = CalculatorOperations[operator](currentValue, inputValue)\n      \n      this.setState({\n        value: newValue,\n        displayValue: String(newValue)\n      })\n    }\n    \n    this.setState({\n      waitingForOperand: true,\n      operator: nextOperator\n    })\n  }\n  \n  handleKeyDown = (event) => {\n    let { key } = event\n    \n    if (key === 'Enter')\n      key = '='\n    \n    if ((/\\d/).test(key)) {\n      event.preventDefault()\n      this.inputDigit(parseInt(key, 10))\n    } else if (key in CalculatorOperations) {\n      event.preventDefault()\n      this.performOperation(key)\n    } else if (key === '.') {\n      event.preventDefault()\n      this.inputDot()\n    } else if (key === '%') {\n      event.preventDefault()\n      this.inputPercent()\n    } else if (key === 'Backspace') {\n      event.preventDefault()\n      this.clearLastChar()\n    } else if (key === 'Clear') {\n      event.preventDefault()\n      \n      if (this.state.displayValue !== '0') {\n        this.clearDisplay()\n      } else {\n        this.clearAll()\n      }\n    }\n  };\n  \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown)\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n  \n  render() {\n    const { displayValue } = this.state\n    \n    const clearDisplay = displayValue !== '0'\n    const clearText = clearDisplay ? 'C' : 'AC'\n    \n    return (\n      <div className=\"calculator\">\n        <CalculatorDisplay value={displayValue}/>\n        <div className=\"calculator-keypad\">\n          <div className=\"input-keys\">\n            <div className=\"function-keys\">\n              <CalculatorKey className=\"key-clear\" onPress={() => clearDisplay ? this.clearDisplay() : this.clearAll()}>{clearText}</CalculatorKey>\n              <CalculatorKey className=\"key-sign\" onPress={() => this.toggleSign()}>±</CalculatorKey>\n              <CalculatorKey className=\"key-percent\" onPress={() => this.inputPercent()}>%</CalculatorKey>\n            </div>\n            <div className=\"digit-keys\">\n              <CalculatorKey className=\"key-0\" onPress={() => this.inputDigit(0)}>0</CalculatorKey>\n              <CalculatorKey className=\"key-dot\" onPress={() => this.inputDot()}>●</CalculatorKey>\n              <CalculatorKey className=\"key-1\" onPress={() => this.inputDigit(1)}>1</CalculatorKey>\n              <CalculatorKey className=\"key-2\" onPress={() => this.inputDigit(2)}>2</CalculatorKey>\n              <CalculatorKey className=\"key-3\" onPress={() => this.inputDigit(3)}>3</CalculatorKey>\n              <CalculatorKey className=\"key-4\" onPress={() => this.inputDigit(4)}>4</CalculatorKey>\n              <CalculatorKey className=\"key-5\" onPress={() => this.inputDigit(5)}>5</CalculatorKey>\n              <CalculatorKey className=\"key-6\" onPress={() => this.inputDigit(6)}>6</CalculatorKey>\n              <CalculatorKey className=\"key-7\" onPress={() => this.inputDigit(7)}>7</CalculatorKey>\n              <CalculatorKey className=\"key-8\" onPress={() => this.inputDigit(8)}>8</CalculatorKey>\n              <CalculatorKey className=\"key-9\" onPress={() => this.inputDigit(9)}>9</CalculatorKey>\n            </div>\n          </div>\n          <div className=\"operator-keys\">\n            <CalculatorKey className=\"key-divide\" onPress={() => this.performOperation('/')}>÷</CalculatorKey>\n            <CalculatorKey className=\"key-multiply\" onPress={() => this.performOperation('*')}>×</CalculatorKey>\n            <CalculatorKey className=\"key-subtract\" onPress={() => this.performOperation('-')}>−</CalculatorKey>\n            <CalculatorKey className=\"key-add\" onPress={() => this.performOperation('+')}>+</CalculatorKey>\n            <CalculatorKey className=\"key-equals\" onPress={() => this.performOperation('=')}>=</CalculatorKey>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Calculator/>,\n  document.getElementById('app')\n)\n\nexport default CalculatorLayout;"]},"metadata":{},"sourceType":"module"}