{"ast":null,"code":"function doOperation(left, right, operation) {\n  const pre = parseFloat(left || \"0\"); //연산자 앞에 오는 숫자\n\n  const back = parseFloat(right || (operation === \"/\" || operation === '*' ? \"1\" : \"0\")); //연산자 뒤에 오는 숫자\n\n  if (operation === \"+\") {\n    return (pre + back).toString();\n  }\n\n  if (operation === \"-\") {\n    return (pre - back).toString();\n  }\n\n  if (operation === \"*\") {\n    return (pre * back).toString();\n  }\n\n  if (operation === \"/\") {\n    if (back == \"0\") {\n      return \"NaN\"; //0으로 나눴을 때 에러\n    }\n\n    if (back != \"0\") {\n      return (pre / back).toString();\n    }\n  }\n\n  throw Error(`Unknown operation '${operation}'`);\n}\n\nfunction Calculate(State, button) {\n  var num = \"0123456789\";\n\n  if (button === \"C\") {\n    //클리어 버튼을 눌렀을 때\n    return {\n      result: \"0\",\n      //디스플레이에 보여주는게 0\n      next: null,\n      operation: null\n    };\n  }\n\n  if (num.indexOf(button) !== -1) {\n    //숫자를 눌렀을 때\n    if (button === \"0\" && State.next === \"0\") {\n      //0눌렀는데 또 0 눌렀을 때\n      return {};\n    }\n\n    if (State.operation) {\n      //계산해야할 연산자가 있을 때\n      if (State.next) {\n        //넥스트가 있다면 = 기존에 입력된 값이 있다면\n        return {\n          next: State.next + button\n        }; //넥스트는 현재 값에 현재 누른 값을 더한 것(문자열)\n      } //예를 들어, 2 입력하고 5입력하면 25가 됨\n\n\n      return {\n        next: button\n      }; //넥스트 없으면 넥스트는 지금 입력한 버튼\n    }\n\n    if (State.next) {\n      //넥스트가 있다면\n      const next = State.next === \"0\" ? button : State.next + button; //현재 넥스트가 0이라면 현재 누른 값으로 대체하고, 아니면 현재 넥스트값에 현재 누른값 더하기\n\n      return {\n        next,\n        result: null\n      };\n    }\n\n    return {\n      //넥스트가 없다면\n      next: button,\n      result: null\n    };\n  }\n\n  if (button === \".\") {\n    if (State.next) {\n      //넥스트가 있을 때\n      if (State.next.includes(\".\")) {\n        //.이 이미 입력되었을 시 처리\n        return {};\n      }\n\n      return {\n        next: State.next + \".\"\n      }; //.이 입력 안되있으면 넣기\n    }\n\n    return {\n      next: \"0.\"\n    }; //넥스트가 없을 때 = 기본화면에서 . 바로 누르면 0.되게\n  }\n\n  if (button === \"=\") {\n    //최종 결과\n    if (State.next && State.operation) {\n      //넥스트와 오퍼레이션이 있을 때\n      return {\n        result: doOperation(State.result, State.next, State.operation),\n        //계산\n        next: null,\n        operation: null\n      };\n    }\n  }\n\n  if (State.operation) {\n    return {\n      result: doOperation(State.result, State.next, State.operation),\n      next: null,\n      operation: button\n    };\n  }\n\n  if (!State.next) {\n    return {\n      operation: button\n    };\n  }\n\n  return {\n    result: State.next,\n    next: null,\n    operation: button\n  };\n}\n\nexport default Calculate;","map":{"version":3,"sources":["/home/parkji/react_calculator/src/functionCalculate.js"],"names":["doOperation","left","right","operation","pre","parseFloat","back","toString","Error","Calculate","State","button","num","result","next","indexOf","includes"],"mappings":"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","sourcesContent":["function doOperation(left, right, operation) {\n  const pre = parseFloat(left || \"0\") //연산자 앞에 오는 숫자\n  const back = parseFloat(right || (operation === \"/\" || operation === '*' ? \"1\": \"0\")) //연산자 뒤에 오는 숫자\n  if (operation === \"+\") {\n    return (pre+back).toString();\n  }\n  if (operation === \"-\") {\n    return (pre-back).toString();\n  }\n  if (operation === \"*\") {\n    return (pre*back).toString();\n  }\n  if (operation === \"/\") {\n    if (back == \"0\") {\n      return \"NaN\"; //0으로 나눴을 때 에러\n    } \n    if (back != \"0\"){\n      return (pre/back).toString();\n    }\n}   \n  throw Error(`Unknown operation '${operation}'`);\n}\n\nfunction Calculate(State, button) {\n    var num = \"0123456789\"\n    if (button === \"C\") {//클리어 버튼을 눌렀을 때\n      return {\n        result: \"0\", //디스플레이에 보여주는게 0\n        next: null,\n        operation: null,\n      };\n    }\n    \n    if (num.indexOf(button) !== -1) { //숫자를 눌렀을 때\n      if (button === \"0\" && State.next === \"0\") { //0눌렀는데 또 0 눌렀을 때\n        return {};\n      }\n\n      if (State.operation) { //계산해야할 연산자가 있을 때\n        if (State.next) { //넥스트가 있다면 = 기존에 입력된 값이 있다면\n          return { next: State.next + button }; //넥스트는 현재 값에 현재 누른 값을 더한 것(문자열)\n        } //예를 들어, 2 입력하고 5입력하면 25가 됨\n        return { next: button }; //넥스트 없으면 넥스트는 지금 입력한 버튼\n      } \n\n      if (State.next) { //넥스트가 있다면\n        const next = State.next === \"0\" ? button : State.next + button; //현재 넥스트가 0이라면 현재 누른 값으로 대체하고, 아니면 현재 넥스트값에 현재 누른값 더하기\n        return {\n          next,\n          result: null, \n        };\n      }\n      return { //넥스트가 없다면\n        next: button,\n        result: null,\n      };\n    }\n   \n    if (button === \".\") {\n      if (State.next) { //넥스트가 있을 때\n        if (State.next.includes(\".\")) { //.이 이미 입력되었을 시 처리\n          return {};\n        }\n        return { next: State.next + \".\" }; //.이 입력 안되있으면 넣기\n      }\n      return { next: \"0.\" }; //넥스트가 없을 때 = 기본화면에서 . 바로 누르면 0.되게\n    }\n  \n    if (button === \"=\") { //최종 결과\n      if (State.next && State.operation) { //넥스트와 오퍼레이션이 있을 때\n        return {\n          result: doOperation(State.result, State.next, State.operation), //계산\n          next: null,\n          operation: null,\n        };\n      } \n    }\n  \n    if (State.operation) { \n      return {\n        result: doOperation(State.result, State.next, State.operation),\n        next: null,\n        operation: button,\n      };\n    }\n\n    if (!State.next) {\n      return { operation: button };\n    }\n  \n    return {\n      result: State.next,\n      next: null,\n      operation: button,\n    };\n  }\n\n  export default Calculate;"]},"metadata":{},"sourceType":"module"}